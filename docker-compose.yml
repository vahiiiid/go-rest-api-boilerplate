# Development docker compose with hot-reload
services:
  db:
    image: postgres:15-alpine
    container_name: ${DB_CONTAINER_NAME:-go_api_db}
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-go_api}
    # No ports exposed to host - only accessible within Docker network
    expose:
      - "${DB_PORT:-5432}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - go_api_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-5}

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development  # Use development stage
    container_name: ${APP_CONTAINER_NAME:-go_api_app}
    env_file:
      - .env
    ports:
      - "${PORT:-8080}:${PORT:-8080}"
    volumes:
      # Mount source code for hot-reload in development
      - ./:/app
      - /app/tmp  # Exclude tmp directory
    depends_on:
      db:
        condition: service_healthy
    networks:
      - go_api_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${PORT:-8080}/health || exit 1"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: ${PROMETHEUS_CONTAINER_NAME:-go_api_prometheus}
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - go_api_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ${GRAFANA_CONTAINER_NAME:-go_api_grafana}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - go_api_network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  go_api_network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
