name: Automated PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  automated-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          **/*.go
          **/*.md
          **/*.yml
          **/*.yaml
          **/*.json
          go.mod
          go.sum
          Dockerfile
          docker-compose*.yml

    - name: Check if PR is from fork
      id: fork-check
      run: |
        if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
          echo "is_fork=true" >> $GITHUB_OUTPUT
          echo "üîÑ Fork detected: ${{ github.event.pull_request.head.repo.full_name }} -> ${{ github.repository }}"
          echo "üìù Analysis will run but write operations (comments/labels/assignments) will be skipped for security"
        else
          echo "is_fork=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Internal PR detected - full automation enabled"
        fi

    - name: Run automated code analysis
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "## ü§ñ Automated Code Review" >> review_comment.md
        echo "" >> review_comment.md
        echo "I've analyzed the changes in this PR. Here are my findings:" >> review_comment.md
        echo "" >> review_comment.md
        
        # Check for Go files
        if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "\.go$"; then
          echo "### üêπ Go Code Analysis" >> review_comment.md
          echo "" >> review_comment.md
          
          # Run go vet
          if go vet ./...; then
            echo "- ‚úÖ **go vet**: No issues found" >> review_comment.md
          else
            echo "- ‚ùå **go vet**: Issues detected (see CI logs)" >> review_comment.md
          fi
          
          # Check for common patterns
          echo "- üîç **Code Patterns Check**:" >> review_comment.md
          
          # Check for error handling
          if grep -r "if err != nil" ${{ steps.changed-files.outputs.all_changed_files }} > /dev/null 2>&1; then
            echo "  - ‚úÖ Error handling patterns found" >> review_comment.md
          else
            echo "  - ‚ö†Ô∏è Consider adding proper error handling" >> review_comment.md
          fi
          
          # Check for logging
          if grep -r "log\." ${{ steps.changed-files.outputs.all_changed_files }} > /dev/null 2>&1; then
            echo "  - ‚úÖ Logging statements present" >> review_comment.md
          else
            echo "  - üí° Consider adding logging for better debugging" >> review_comment.md
          fi
          
          # Check for tests
          if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "_test\.go$"; then
            echo "  - ‚úÖ Test files included" >> review_comment.md
          else
            echo "  - üìù Consider adding tests for new functionality" >> review_comment.md
          fi
          
          echo "" >> review_comment.md
        fi
        
        # Check for API changes
        if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "handler\|router\|api"; then
          echo "### üåê API Changes Detected" >> review_comment.md
          echo "" >> review_comment.md
          echo "- üîç **API Review Checklist**:" >> review_comment.md
          echo "  - [ ] Are new endpoints properly documented?" >> review_comment.md
          echo "  - [ ] Are authentication/authorization requirements clear?" >> review_comment.md
          echo "  - [ ] Are request/response schemas validated?" >> review_comment.md
          echo "  - [ ] Are error responses consistent?" >> review_comment.md
          echo "  - [ ] Is rate limiting considered?" >> review_comment.md
          echo "" >> review_comment.md
        fi
        
        # Check for database changes
        if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "migration\|model\|repository\|\.sql"; then
          echo "### üóÑÔ∏è Database Changes Detected" >> review_comment.md
          echo "- üîç **Database Review Checklist**:" >> review_comment.md
          echo "  - [ ] Are migrations backward compatible?" >> review_comment.md
          echo "  - [ ] Are indexes properly defined?" >> review_context.md
          echo "  - [ ] Are foreign key constraints appropriate?" >> review_comment.md
          echo "  - [ ] Is data validation handled?" >> review_comment.md
          echo "" >> review_comment.md
        fi
        
        # Check for Docker changes
        if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "Dockerfile\|docker-compose"; then
          echo "### üê≥ Docker Changes Detected" >> review_comment.md
          echo "- üîç **Docker Review Checklist**:" >> review_comment.md
          echo "  - [ ] Are image sizes optimized?" >> review_comment.md
          echo "  - [ ] Are security best practices followed?" >> review_comment.md
          echo "  - [ ] Are environment variables properly handled?" >> review_comment.md
          echo "  - [ ] Are health checks included?" >> review_comment.md
          echo "" >> review_comment.md
        fi
        
        # General recommendations
        echo "### üí° General Recommendations" >> review_comment.md
        echo "" >> review_comment.md
        echo "- üß™ **Testing**: Ensure all new functionality is covered by tests" >> review_comment.md
        echo "- üìö **Documentation**: Update README or API docs if needed" >> review_comment.md
        echo "- üîí **Security**: Review for potential security vulnerabilities" >> review_comment.md
        echo "- ‚ö° **Performance**: Consider performance implications of changes" >> review_comment.md
        echo "" >> review_comment.md
        echo "---" >> review_comment.md
        echo "*This review was automatically generated. Please address any concerns before merging.*" >> review_comment.md

    - name: Generate workflow summary
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "## ü§ñ Automated PR Review Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.fork-check.outputs.is_fork }}" == "true" ]; then
          echo "üîÑ **Fork PR Detected**: This PR is from a forked repository" >> $GITHUB_STEP_SUMMARY
          echo "üìù **Note**: Comments and labels are skipped for security, but analysis results are shown below" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ **Internal PR**: Full automation enabled (comments, labels, reviewer assignment)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add analysis results to summary
        if [ -f "review_comment.md" ]; then
          cat review_comment.md >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "**Changed Files**: ${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_STEP_SUMMARY
        echo "**Files Count**: ${{ steps.changed-files.outputs.all_changed_files_count }}" >> $GITHUB_STEP_SUMMARY

    - name: Post review comment
      if: steps.changed-files.outputs.any_changed == 'true' && steps.fork-check.outputs.is_fork == 'false'
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            // Check if review comment file exists
            if (fs.existsSync('review_comment.md')) {
              const comment = fs.readFileSync('review_comment.md', 'utf8');
              
              // Post the review comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log('‚úÖ Review comment posted successfully');
            } else {
              console.log('‚ö†Ô∏è No review comment file found to post');
            }
          } catch (error) {
            console.error('‚ùå Failed to post review comment:', error.message);
            // Don't fail the workflow if comment posting fails
          }

    - name: Log fork PR info
      if: steps.changed-files.outputs.any_changed == 'true' && steps.fork-check.outputs.is_fork == 'true'
      run: |
        echo "‚ÑπÔ∏è This is a fork PR - review comment skipped for security reasons"
        echo "üîç Fork contributors can view the analysis results in the workflow logs and job summary below"

    - name: Auto-assign reviewers
      if: steps.fork-check.outputs.is_fork == 'false'
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          try {
            // Only assign reviewer if PR author is not the repository owner
            const prAuthor = context.payload.pull_request.user.login;
            const repoOwner = context.repo.owner;
            
            if (prAuthor !== repoOwner) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: [repoOwner]
              });
              console.log('‚úÖ Reviewer assigned successfully');
            } else {
              console.log('‚ÑπÔ∏è Skipping reviewer assignment: PR author is the repository owner');
            }
          } catch (error) {
            console.error('‚ùå Failed to assign reviewer:', error.message);
            // Don't fail the workflow if reviewer assignment fails
          }

    - name: Add labels based on changes
      if: steps.fork-check.outputs.is_fork == 'false'
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}';
            const labels = [];
            
            if (changedFiles.includes('.go')) labels.push('go');
            if (changedFiles.includes('_test.go')) labels.push('tests');
            if (changedFiles.includes('Dockerfile') || changedFiles.includes('docker-compose')) labels.push('docker');
            if (changedFiles.includes('.md')) labels.push('documentation');
            if (changedFiles.includes('handler') || changedFiles.includes('router')) labels.push('api');
            if (changedFiles.includes('migration') || changedFiles.includes('.sql')) labels.push('database');
            if (changedFiles.includes('.yml') || changedFiles.includes('.yaml')) labels.push('ci/cd');
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
              console.log(`‚úÖ Labels added: ${labels.join(', ')}`);
            } else {
              console.log('‚ÑπÔ∏è No labels to add based on changed files');
            }
          } catch (error) {
            console.error('‚ùå Failed to add labels:', error.message);
            // Don't fail the workflow if labeling fails
          }

    - name: Workflow completion summary
      if: always()
      run: |
        echo "üéâ Automated PR Review Workflow Completed"
        echo "üìä Fork Detection: ${{ steps.fork-check.outputs.is_fork == 'true' && 'Fork PR' || 'Internal PR' }}"
        echo "üìù Files Changed: ${{ steps.changed-files.outputs.any_changed == 'true' && 'Yes' || 'No' }}"
        echo "üîç Analysis: ${{ steps.changed-files.outputs.any_changed == 'true' && 'Completed' || 'Skipped (no relevant files changed)' }}"
        
        if [ "${{ steps.fork-check.outputs.is_fork }}" == "true" ]; then
          echo "‚ÑπÔ∏è Fork PR detected - write operations were skipped for security"
          echo "üìã Review results are available in the workflow summary above"
        else
          echo "‚úÖ Internal PR - full automation was applied"
        fi