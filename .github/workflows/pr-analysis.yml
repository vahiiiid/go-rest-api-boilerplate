name: PR Size and Complexity Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  analyze-pr:
    name: Analyze PR Size and Complexity
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get PR stats
      id: pr-stats
      run: |
        # Get the base branch
        BASE_SHA=$(git merge-base origin/${{ github.base_ref }} HEAD)
        
        # Count changed files
        CHANGED_FILES=$(git diff --name-only $BASE_SHA HEAD | wc -l)
        
        # Count lines added/removed
        LINES_ADDED=$(git diff --numstat $BASE_SHA HEAD | awk '{sum+=$1} END {print sum+0}')
        LINES_REMOVED=$(git diff --numstat $BASE_SHA HEAD | awk '{sum+=$2} END {print sum+0}')
        TOTAL_CHANGES=$((LINES_ADDED + LINES_REMOVED))
        
        # Count Go files changed
        GO_FILES=$(git diff --name-only $BASE_SHA HEAD | grep '\.go$' | wc -l)
        
        # Count test files
        TEST_FILES=$(git diff --name-only $BASE_SHA HEAD | grep '_test\.go$' | wc -l)
        
        echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "lines_added=$LINES_ADDED" >> $GITHUB_OUTPUT
        echo "lines_removed=$LINES_REMOVED" >> $GITHUB_OUTPUT
        echo "total_changes=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
        echo "go_files=$GO_FILES" >> $GITHUB_OUTPUT
        echo "test_files=$TEST_FILES" >> $GITHUB_OUTPUT

    - name: Check if PR is from fork
      id: fork-check
      run: |
        if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
          echo "is_fork=true" >> $GITHUB_OUTPUT
          echo "üîÑ Fork detected: ${{ github.event.pull_request.head.repo.full_name }} -> ${{ github.repository }}"
          echo "üìä Analysis will run but write operations (comments/labels) will be skipped for security"
        else
          echo "is_fork=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Internal PR detected - full PR analysis automation enabled"
        fi

    - name: Determine PR size
      id: pr-size
      run: |
        TOTAL_CHANGES=${{ steps.pr-stats.outputs.total_changes }}
        
        if [ $TOTAL_CHANGES -le 10 ]; then
          SIZE="XS"
          COLOR="28a745"
        elif [ $TOTAL_CHANGES -le 50 ]; then
          SIZE="S"
          COLOR="28a745"
        elif [ $TOTAL_CHANGES -le 200 ]; then
          SIZE="M"
          COLOR="dbab09"
        elif [ $TOTAL_CHANGES -le 500 ]; then
          SIZE="L"
          COLOR="d93f0b"
        else
          SIZE="XL"
          COLOR="d93f0b"
        fi
        
        echo "size=$SIZE" >> $GITHUB_OUTPUT
        echo "color=$COLOR" >> $GITHUB_OUTPUT

    - name: Add size label
      if: steps.fork-check.outputs.is_fork == 'false'
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const size = '${{ steps.pr-size.outputs.size }}';
            const color = '${{ steps.pr-size.outputs.color }}';
            
            // Remove existing size labels
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const sizeLabels = labels.filter(label => 
              label.name.startsWith('size/'));
            
            for (const label of sizeLabels) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: label.name
              });
            }
            
            // Add new size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [`size/${size}`]
            });
            
            console.log(`‚úÖ Size label added: size/${size}`);
          } catch (error) {
            console.error('‚ùå Failed to add size label:', error.message);
            // Don't fail the workflow if labeling fails
          }

    - name: Generate PR analysis summary
      id: analysis-summary
      run: |
        # Store analysis data for use in both comment and summary
        STATS_JSON=$(cat << 'EOF'
        {
          "changedFiles": ${{ steps.pr-stats.outputs.changed_files }},
          "linesAdded": ${{ steps.pr-stats.outputs.lines_added }},
          "linesRemoved": ${{ steps.pr-stats.outputs.lines_removed }},
          "totalChanges": ${{ steps.pr-stats.outputs.total_changes }},
          "goFiles": ${{ steps.pr-stats.outputs.go_files }},
          "testFiles": ${{ steps.pr-stats.outputs.test_files }},
          "size": "${{ steps.pr-size.outputs.size }}"
        }
        EOF
        )
        
        echo "stats_json<<EOF" >> $GITHUB_OUTPUT
        echo "$STATS_JSON" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Post PR analysis comment
      if: steps.fork-check.outputs.is_fork == 'false'
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const stats = {
              changedFiles: ${{ steps.pr-stats.outputs.changed_files }},
              linesAdded: ${{ steps.pr-stats.outputs.lines_added }},
              linesRemoved: ${{ steps.pr-stats.outputs.lines_removed }},
              totalChanges: ${{ steps.pr-stats.outputs.total_changes }},
              goFiles: ${{ steps.pr-stats.outputs.go_files }},
              testFiles: ${{ steps.pr-stats.outputs.test_files }}
            };
            
            const size = '${{ steps.pr-size.outputs.size }}';
            
            let sizeEmoji = 'üì¶';
            let sizeComment = '';
            
            switch(size) {
              case 'XS':
                sizeEmoji = 'üü¢';
                sizeComment = 'Very small PR - easy to review!';
                break;
              case 'S':
                sizeEmoji = 'üü¢';
                sizeComment = 'Small PR - should be quick to review.';
                break;
              case 'M':
                sizeEmoji = 'üü°';
                sizeComment = 'Medium-sized PR - might take some time to review.';
                break;
              case 'L':
                sizeEmoji = 'üü†';
                sizeComment = 'Large PR - consider breaking into smaller PRs if possible.';
                break;
              case 'XL':
                sizeEmoji = 'üî¥';
                sizeComment = 'Very large PR - strongly consider breaking into smaller, focused PRs.';
                break;
            }
            
            const testCoverage = stats.goFiles > 0 ? 
              `${Math.round((stats.testFiles / stats.goFiles) * 100)}%` : 
              'N/A';
            
            const comment = `## üìä PR Analysis
            
            ${sizeEmoji} **Size**: ${size} - ${sizeComment}
            
            ### üìà Statistics
            - **Files changed**: ${stats.changedFiles}
            - **Lines added**: +${stats.linesAdded}
            - **Lines removed**: -${stats.linesRemoved}
            - **Total changes**: ${stats.totalChanges}
            - **Go files**: ${stats.goFiles}
            - **Test files**: ${stats.testFiles}
            - **Test coverage ratio**: ${testCoverage}
            
            ### üí° Recommendations
            ${stats.testFiles === 0 && stats.goFiles > 0 ? 
              '- ‚ö†Ô∏è **Consider adding tests** for the Go code changes\n' : ''}
            ${stats.totalChanges > 500 ? 
              '- üîÑ **Consider breaking this PR** into smaller, focused changes\n' : ''}
            ${stats.changedFiles > 20 ? 
              '- üìù **Large number of files changed** - ensure changes are related\n' : ''}
            
            ---
            *This analysis was automatically generated to help with code review.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            console.log('‚úÖ PR analysis comment posted successfully');
          } catch (error) {
            console.error('‚ùå Failed to post PR analysis comment:', error.message);
            // Don't fail the workflow if comment posting fails
          }

    - name: Log fork PR info
      if: steps.fork-check.outputs.is_fork == 'true'
      run: |
        echo "‚ÑπÔ∏è This is a fork PR - analysis comment and labels skipped for security reasons"
        echo "üìä Fork contributors can view the PR analysis results in the workflow summary below"

    - name: Generate workflow summary
      run: |
        echo "## üìä PR Size and Complexity Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.fork-check.outputs.is_fork }}" == "true" ]; then
          echo "üîÑ **Fork PR Detected**: This PR is from a forked repository" >> $GITHUB_STEP_SUMMARY
          echo "üìù **Note**: Comments and labels are skipped for security, but analysis results are shown below" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ **Internal PR**: Full PR analysis automation enabled (comments, labels)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Determine size info for summary
        SIZE="${{ steps.pr-size.outputs.size }}"
        case $SIZE in
          "XS") SIZE_EMOJI="üü¢"; SIZE_DESC="Very small PR - easy to review!" ;;
          "S")  SIZE_EMOJI="üü¢"; SIZE_DESC="Small PR - should be quick to review." ;;
          "M")  SIZE_EMOJI="üü°"; SIZE_DESC="Medium-sized PR - might take some time to review." ;;
          "L")  SIZE_EMOJI="üü†"; SIZE_DESC="Large PR - consider breaking into smaller PRs if possible." ;;
          "XL") SIZE_EMOJI="üî¥"; SIZE_DESC="Very large PR - strongly consider breaking into smaller, focused PRs." ;;
          *)    SIZE_EMOJI="üì¶"; SIZE_DESC="PR size analysis completed." ;;
        esac
        
        echo "${SIZE_EMOJI} **Size**: ${SIZE} - ${SIZE_DESC}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üìà Statistics" >> $GITHUB_STEP_SUMMARY
        echo "- **Files changed**: ${{ steps.pr-stats.outputs.changed_files }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Lines added**: +${{ steps.pr-stats.outputs.lines_added }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Lines removed**: -${{ steps.pr-stats.outputs.lines_removed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Total changes**: ${{ steps.pr-stats.outputs.total_changes }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Go files**: ${{ steps.pr-stats.outputs.go_files }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test files**: ${{ steps.pr-stats.outputs.test_files }}" >> $GITHUB_STEP_SUMMARY
        
        # Calculate test coverage
        if [ "${{ steps.pr-stats.outputs.go_files }}" -gt 0 ]; then
          TEST_COVERAGE=$(echo "scale=0; ${{ steps.pr-stats.outputs.test_files }} * 100 / ${{ steps.pr-stats.outputs.go_files }}" | bc -l 2>/dev/null || echo "0")
          echo "- **Test coverage ratio**: ${TEST_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Test coverage ratio**: N/A" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üí° Recommendations" >> $GITHUB_STEP_SUMMARY
        
        # Add conditional recommendations
        if [ "${{ steps.pr-stats.outputs.test_files }}" -eq 0 ] && [ "${{ steps.pr-stats.outputs.go_files }}" -gt 0 ]; then
          echo "- ‚ö†Ô∏è **Consider adding tests** for the Go code changes" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.pr-stats.outputs.total_changes }}" -gt 500 ]; then
          echo "- üîÑ **Consider breaking this PR** into smaller, focused changes" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.pr-stats.outputs.changed_files }}" -gt 20 ]; then
          echo "- üìù **Large number of files changed** - ensure changes are related" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.pr-stats.outputs.test_files }}" -gt 0 ] && [ "${{ steps.pr-stats.outputs.total_changes }}" -le 200 ] && [ "${{ steps.pr-stats.outputs.changed_files }}" -le 10 ]; then
          echo "- ‚úÖ **Good PR structure** - manageable size with tests included" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*This analysis was automatically generated to help with code review.*" >> $GITHUB_STEP_SUMMARY

    - name: Workflow completion summary
      if: always()
      run: |
        echo "üéâ PR Size and Complexity Analysis Completed"
        echo "üìä Fork Detection: ${{ steps.fork-check.outputs.is_fork == 'true' && 'Fork PR' || 'Internal PR' }}"
        echo "üìè PR Size: ${{ steps.pr-size.outputs.size }}"
        echo "üìà Total Changes: ${{ steps.pr-stats.outputs.total_changes }} lines"
        echo "üìÅ Files Changed: ${{ steps.pr-stats.outputs.changed_files }}"
        
        if [ "${{ steps.fork-check.outputs.is_fork }}" == "true" ]; then
          echo "‚ÑπÔ∏è Fork PR detected - write operations were skipped for security"
          echo "üìã Analysis results are available in the workflow summary above"
        else
          echo "‚úÖ Internal PR - full automation was applied (comment posted, size label added)"
        fi