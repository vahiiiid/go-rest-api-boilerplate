# Production docker-compose
services:
  db:
    image: postgres:15-alpine
    container_name: ${DB_CONTAINER_NAME_PROD:-go_api_db_prod}
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-go_api}
    # No ports exposed to host - only accessible within Docker network
    expose:
      - "${DB_PORT:-5432}"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - go_api_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
    restart: always

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production  # Use production stage
    container_name: ${APP_CONTAINER_NAME_PROD:-go_api_app_prod}
    env_file:
      - .env
    ports:
      - "${PORT:-8080}:${PORT:-8080}"
    # No volumes in production - code is baked into the image
    depends_on:
      db:
        condition: service_healthy
    networks:
      - go_api_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${PORT:-8080}/health || exit 1"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
    restart: always

networks:
  go_api_network:
    driver: bridge

volumes:
  postgres_data_prod:

