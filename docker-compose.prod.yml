# Production docker-compose
services:
  db:
    image: postgres:15-alpine
    container_name: go_api_db_prod
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-go_api}
    # No ports exposed to host - only accessible within Docker network
    expose:
      - "5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - go_api_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production  # Use production stage
    container_name: go_api_app_prod
    environment:
      PORT: 8080
      DB_HOST: db  # Use Docker service name
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-go_api}
      JWT_SECRET: ${JWT_SECRET}
      JWT_TTL_HOURS: ${JWT_TTL_HOURS:-24}
      ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-warn}  # debug, info, warn, error
    ports:
      - "8080:8080"
    # No volumes in production - code is baked into the image
    depends_on:
      db:
        condition: service_healthy
    networks:
      - go_api_network
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:${PORT:-8000}/health"]
      interval: 2s
      timeout: 2s
      retries: 5
    restart: always

networks:
  go_api_network:
    driver: bridge

volumes:
  postgres_data_prod:

